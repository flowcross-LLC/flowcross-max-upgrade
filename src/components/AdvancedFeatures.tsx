import { useState, useEffect, useRef } from "react";
import { Cpu, Wifi, Battery, Volume2, VolumeX, Vibrate, Share, Copy, Check } from "lucide-react";
import { Button } from "@/components/ui/button";
import { useToast } from "@/hooks/use-toast";

const AdvancedFeatures = () => {
  const { toast } = useToast();
  const [isOnline, setIsOnline] = useState(navigator.onLine);
  const [batteryLevel, setBatteryLevel] = useState<number | null>(null);
  const [isCharging, setIsCharging] = useState<boolean | null>(null);
  const [deviceMemory, setDeviceMemory] = useState<number | null>(null);
  const [connectionType, setConnectionType] = useState<string>('unknown');
  const [audioPlaying, setAudioPlaying] = useState(false);
  const [vibrationSupported, setVibrationSupported] = useState(false);
  const [copied, setCopied] = useState(false);
  const audioRef = useRef<HTMLAudioElement>(null);

  useEffect(() => {
    // Network status
    const handleOnline = () => setIsOnline(true);
    const handleOffline = () => setIsOnline(false);
    
    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);

    // Battery API
    if ('getBattery' in navigator) {
      (navigator as any).getBattery().then((battery: any) => {
        setBatteryLevel(Math.round(battery.level * 100));
        setIsCharging(battery.charging);
        
        battery.addEventListener('levelchange', () => {
          setBatteryLevel(Math.round(battery.level * 100));
        });
        
        battery.addEventListener('chargingchange', () => {
          setIsCharging(battery.charging);
        });
      }).catch(() => {
        // Battery API not supported
      });
    }

    // Device Memory
    if ('deviceMemory' in navigator) {
      setDeviceMemory((navigator as any).deviceMemory);
    }

    // Connection API
    if ('connection' in navigator) {
      const connection = (navigator as any).connection;
      setConnectionType(connection.effectiveType || 'unknown');
      
      connection.addEventListener('change', () => {
        setConnectionType(connection.effectiveType || 'unknown');
      });
    }

    // Vibration API
    setVibrationSupported('vibrate' in navigator);

    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, []);

  const playAudioEffect = () => {
    if (audioRef.current) {
      if (audioPlaying) {
        audioRef.current.pause();
        audioRef.current.currentTime = 0;
        setAudioPlaying(false);
      } else {
        // Create a simple audio context for demo
        const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();
        const oscillator = audioContext.createOscillator();
        const gainNode = audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(audioContext.destination);
        
        oscillator.frequency.setValueAtTime(440, audioContext.currentTime);
        oscillator.frequency.exponentialRampToValueAtTime(880, audioContext.currentTime + 0.5);
        
        gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
        gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.5);
        
        oscillator.start(audioContext.currentTime);
        oscillator.stop(audioContext.currentTime + 0.5);
        
        setAudioPlaying(true);
        setTimeout(() => setAudioPlaying(false), 500);
      }
    }
  };

  const triggerVibration = () => {
    if (vibrationSupported) {
      navigator.vibrate([100, 50, 100, 50, 200]);
      toast({
        title: "–í–∏–±—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!",
        description: "–í–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –∑–∞–≤–∏–±—Ä–∏—Ä–æ–≤–∞—Ç—å"
      });
    } else {
      toast({
        title: "–í–∏–±—Ä–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è",
        description: "–í–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Vibration API"
      });
    }
  };

  const shareContent = async () => {
    if (navigator.share) {
      try {
        await navigator.share({
          title: 'FlowCross Launcher',
          text: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —ç—Ç–æ—Ç –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–π Minecraft –ª–∞—É–Ω—á–µ—Ä!',
          url: window.location.href
        });
        toast({
          title: "–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å!",
          description: "–ö–æ–Ω—Ç–µ–Ω—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –Ω–∞—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥"
        });
      } catch (error) {
        console.log('Share cancelled');
      }
    } else {
      toast({
        title: "Web Share API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è",
        description: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ"
      });
    }
  };

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(window.location.href);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
      toast({
        title: "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!",
        description: "–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"
      });
    } catch (error) {
      toast({
        title: "–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"
      });
    }
  };

  const getConnectionIcon = () => {
    switch (connectionType) {
      case '4g': return 'üì∂';
      case '3g': return 'üì∂';
      case '2g': return 'üì∂';
      case 'slow-2g': return 'üì∂';
      default: return 'üåê';
    }
  };

  return (
    <section className="py-20 relative overflow-hidden">
      <div className="container mx-auto px-4">
        <div className="text-center mb-16">
          <h2 className="text-4xl md:text-5xl font-bold mb-6">
            <span className="neon-text text-primary">–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ</span> –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
          </h2>
          <p className="text-xl text-muted-foreground max-w-3xl mx-auto">
            –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö Web API –∏ HTML5 –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.<br />
            <span className="text-primary font-medium">–≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ª–∞—É–Ω—á–µ—Ä–µ</span>
          </p>
        </div>

        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
          {/* System Info */}
          <div className="glass-effect p-6 rounded-xl hover:scale-105 transition-transform duration-300">
            <div className="flex items-center mb-4">
              <Cpu className="w-6 h-6 text-primary mr-3" />
              <h3 className="font-semibold">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ</h3>
            </div>
            <div className="space-y-2 text-sm">
              <div className="flex justify-between">
                <span>–ü–∞–º—è—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:</span>
                <span>{deviceMemory ? `${deviceMemory} –ì–ë` : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</span>
              </div>
              <div className="flex justify-between">
                <span>–Ø–¥—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞:</span>
                <span>{navigator.hardwareConcurrency || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</span>
              </div>
              <div className="flex justify-between">
                <span>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–≥–µ–Ω—Ç:</span>
                <span className="truncate max-w-32" title={navigator.userAgent}>
                  {navigator.userAgent.split(' ')[0]}
                </span>
              </div>
            </div>
          </div>

          {/* Network Status */}
          <div className="glass-effect p-6 rounded-xl hover:scale-105 transition-transform duration-300">
            <div className="flex items-center mb-4">
              <Wifi className={`w-6 h-6 mr-3 ${isOnline ? 'text-green-400' : 'text-red-400'}`} />
              <h3 className="font-semibold">–°–µ—Ç–µ–≤–æ–π —Å—Ç–∞—Ç—É—Å</h3>
            </div>
            <div className="space-y-2 text-sm">
              <div className="flex justify-between">
                <span>–°—Ç–∞—Ç—É—Å:</span>
                <span className={isOnline ? 'text-green-400' : 'text-red-400'}>
                  {isOnline ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ–ª–∞–π–Ω'}
                </span>
              </div>
              <div className="flex justify-between">
                <span>–¢–∏–ø —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:</span>
                <span>{getConnectionIcon()} {connectionType.toUpperCase()}</span>
              </div>
              <div className="flex justify-between">
                <span>–Ø–∑—ã–∫:</span>
                <span>{navigator.language}</span>
              </div>
            </div>
          </div>

          {/* Battery Status */}
          <div className="glass-effect p-6 rounded-xl hover:scale-105 transition-transform duration-300">
            <div className="flex items-center mb-4">
              <Battery className="w-6 h-6 text-primary mr-3" />
              <h3 className="font-semibold">–ë–∞—Ç–∞—Ä–µ—è</h3>
            </div>
            <div className="space-y-2 text-sm">
              <div className="flex justify-between">
                <span>–£—Ä–æ–≤–µ–Ω—å:</span>
                <span>{batteryLevel !== null ? `${batteryLevel}%` : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</span>
              </div>
              <div className="flex justify-between">
                <span>–ó–∞—Ä—è–¥–∫–∞:</span>
                <span className={isCharging ? 'text-green-400' : 'text-yellow-400'}>
                  {isCharging === null ? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' : isCharging ? '–î–∞' : '–ù–µ—Ç'}
                </span>
              </div>
              {batteryLevel !== null && (
                <div className="w-full bg-muted rounded-full h-2 mt-2">
                  <div
                    className={`h-2 rounded-full transition-all duration-300 ${
                      batteryLevel > 50 ? 'bg-green-400' : 
                      batteryLevel > 20 ? 'bg-yellow-400' : 'bg-red-400'
                    }`}
                    style={{ width: `${batteryLevel}%` }}
                  />
                </div>
              )}
            </div>
          </div>

          {/* Audio Controls */}
          <div className="glass-effect p-6 rounded-xl hover:scale-105 transition-transform duration-300">
            <div className="flex items-center mb-4">
              {audioPlaying ? (
                <Volume2 className="w-6 h-6 text-primary mr-3" />
              ) : (
                <VolumeX className="w-6 h-6 text-muted-foreground mr-3" />
              )}
              <h3 className="font-semibold">–ê—É–¥–∏–æ —ç—Ñ—Ñ–µ–∫—Ç—ã</h3>
            </div>
            <p className="text-sm text-muted-foreground mb-4">
              Web Audio API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–≤—É–∫–æ–≤—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
            </p>
            <Button
              variant={audioPlaying ? "destructive" : "glow"}
              size="sm"
              onClick={playAudioEffect}
              className="w-full"
            >
              {audioPlaying ? '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å' : '–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏'} –∑–≤—É–∫
            </Button>
            <audio ref={audioRef} />
          </div>

          {/* Vibration */}
          <div className="glass-effect p-6 rounded-xl hover:scale-105 transition-transform duration-300">
            <div className="flex items-center mb-4">
              <Vibrate className="w-6 h-6 text-primary mr-3" />
              <h3 className="font-semibold">–¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</h3>
            </div>
            <p className="text-sm text-muted-foreground mb-4">
              {vibrationSupported ? 'Vibration API –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' : 'Vibration API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'}
            </p>
            <Button
              variant="outline"
              size="sm"
              onClick={triggerVibration}
              className="w-full"
              disabled={!vibrationSupported}
            >
              –¢–µ—Å—Ç–æ–≤–∞—è –≤–∏–±—Ä–∞—Ü–∏—è
            </Button>
          </div>

          {/* Share & Clipboard */}
          <div className="glass-effect p-6 rounded-xl hover:scale-105 transition-transform duration-300">
            <div className="flex items-center mb-4">
              <Share className="w-6 h-6 text-primary mr-3" />
              <h3 className="font-semibold">–ü–æ–¥–µ–ª–∏—Ç—å—Å—è & –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</h3>
            </div>
            <div className="space-y-2">
              <Button
                variant="glow"
                size="sm"
                onClick={shareContent}
                className="w-full"
              >
                <Share className="w-4 h-4 mr-2" />
                Web Share
              </Button>
              <Button
                variant="outline"
                size="sm"
                onClick={copyToClipboard}
                className="w-full"
              >
                {copied ? (
                  <Check className="w-4 h-4 mr-2 text-green-400" />
                ) : (
                  <Copy className="w-4 h-4 mr-2" />
                )}
                {copied ? '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!' : '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É'}
              </Button>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default AdvancedFeatures;